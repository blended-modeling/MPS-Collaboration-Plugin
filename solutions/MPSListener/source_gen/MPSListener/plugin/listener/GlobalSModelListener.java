package MPSListener.plugin.listener;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModelListener;
import org.jetbrains.mps.openapi.model.SNodeChangeListener;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.event.SPropertyChangeEvent;
import org.jetbrains.mps.openapi.event.SReferenceChangeEvent;
import org.jetbrains.mps.openapi.event.SNodeAddEvent;
import org.jetbrains.mps.openapi.event.SNodeRemoveEvent;

public class GlobalSModelListener implements SModelListener, SNodeChangeListener {
  private static final Logger LOG = LogManager.getLogger(GlobalSModelListener.class);

  protected SRepository instanceRepository;
  protected boolean myActive;


  private SNode selectedInstance;
  private SModel instanceModel;
  private SModule instanceModule;

  public GlobalSModelListener(SNode selectedInstance) {
    this.selectedInstance = selectedInstance;
    this.instanceModel = this.selectedInstance.getModel();
    this.instanceModule = this.instanceModel.getModule();
    this.instanceRepository = this.instanceModule.getRepository();
  }


  public void start() {
    this.instanceModel.addModelListener(this);
    this.instanceModel.addChangeListener(this);
  }








  public void stop() {
    myActive = false;
    instanceRepository.getModelAccess().runReadAction(() -> {
      GlobalSModelListener.this.instanceModel.removeModelListener(GlobalSModelListener.this);
      GlobalSModelListener.this.instanceModel.removeChangeListener(GlobalSModelListener.this);
    });
  }







  @Override
  public void modelLoaded(SModel model, boolean partially) {
    if (LOG.isInfoEnabled()) {
      LOG.info(model.getName() + "loaded. Partial load:" + partially);
    }
  }
  @Override
  public void modelReplaced(SModel model) {
  }
  @Override
  public void modelUnloaded(SModel model) {
  }
  @Override
  public void modelSaved(SModel model) {
  }
  @Override
  public void modelAttached(SModel model, SRepository repository) {
  }
  @Override
  public void modelDetached(SModel model, SRepository repository) {
  }
  @Override
  public void conflictDetected(SModel model) {
  }
  @Override
  public void problemsDetected(SModel model, Iterable<SModel.Problem> iterable) {
  }




  @Override
  public void propertyChanged(@NotNull SPropertyChangeEvent event) {
  }
  @Override
  public void referenceChanged(@NotNull SReferenceChangeEvent event) {
  }
  @Override
  public void nodeAdded(@NotNull SNodeAddEvent event) {
    if (LOG.isInfoEnabled()) {
      LOG.info("node added");
    }
    if (LOG.isInfoEnabled()) {
      LOG.info(event.getParent().getName());
    }
    if (LOG.isInfoEnabled()) {
      LOG.info(event.getChild().getName());
    }
  }
  @Override
  public void nodeRemoved(@NotNull SNodeRemoveEvent event) {
  }

  public SRepository getRepositary() {
    return this.instanceRepository;
  }
  public SModule getModule() {
    return this.instanceModule;
  }
}
