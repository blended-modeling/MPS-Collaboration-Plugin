package MPSListener.plugin.listener;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.event.SPropertyChangeEvent;
import MPSListener.plugin.dataClasses.mps.PropertyChanged;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;

public class MyListener extends GlobalSModelListener {
  private static final Logger LOG = LogManager.getLogger(MyListener.class);
  private static MyListener myListener;
  private MyListener(SNode node) {
    super(node);
  }

  public static MyListener getInstance(SNode startingNode) {
    if (myListener == null) {
      myListener = new MyListener(startingNode);
    }
    return myListener;
  }

  @Override
  public void propertyChanged(@NotNull SPropertyChangeEvent event) {
    PropertyChanged propertyChanged = new PropertyChanged(event);
    if (LOG.isInfoEnabled()) {
      LOG.info(propertyChanged.toString());
    }
    SModel sModel = event.getModel();
    SNode sNode = event.getNode();
    SModule sModule = event.getModel().getModule();
  }



}
