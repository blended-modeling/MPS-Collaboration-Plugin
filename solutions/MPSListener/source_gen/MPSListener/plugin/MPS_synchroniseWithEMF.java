package MPSListener.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Iterator;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class MPS_synchroniseWithEMF {
  private static final Logger LOG = LogManager.getLogger(MPS_synchroniseWithEMF.class);
  private EMF_fileData emfFileData;
  private SRepository myRepositary;
  private MPS_fileData mpsFileData;
  private MyListener myListener;

  protected List<SRepository> myRepos;
  protected List<SModule> myModules;
  protected List<SModel> myModels;



  public MPS_synchroniseWithEMF(EMF_fileData emfFileData) {
    this.emfFileData = emfFileData;
    this.myRepositary = MPSModuleRepository.getInstance();
    System.out.println(myRepositary);
    this.myModules = ListSequence.fromList(new ArrayList<SModule>());
    this.myRepos = ListSequence.fromList(new ArrayList<SRepository>());
    this.myModels = ListSequence.fromList(new ArrayList<SModel>());
    start();
  }
  private Boolean fileIsPresentLocally() {
    String fileName = emfFileData.getName();
    Iterator<SModule> moduleIterator = ListSequence.fromList(myModules).iterator();
    // Locate sandbox module
    while (moduleIterator.hasNext()) {
      SModule currentModule = moduleIterator.next();
      if (currentModule.getModuleName().toString().equals("sandbox")) {

        // For each model present, visit all instances to look for fileName
        Iterator<SModel> modelIterator = currentModule.getModels().iterator();
        while (modelIterator.hasNext()) {
          SModel currentModel = modelIterator.next();

          // Visit all instances of currentModel to look for fileName
          Iterator<SNode> nodeIterator = currentModel.getRootNodes().iterator();
          while (nodeIterator.hasNext()) {
            SNode currentNode = nodeIterator.next();
            if (currentNode.getName().toString().equals(fileName)) {
              Iterator<? extends SNode> modelInstanceChildren = currentNode.getChildren().iterator();
              if (LOG.isInfoEnabled()) {
                LOG.info("woopa");
              }
              parseModeldata(modelInstanceChildren);
              return true;
            }
          }
        }
      }
    }
    return false;
  }


  /**
   * Helper function for fileIsPresentLocally
   */
  private void parseModeldata(Iterator<? extends SNode> modelChildrenIterator) {
    this.mpsFileData.setModelName(emfFileData.getName());
    while (modelChildrenIterator.hasNext()) {
      SNode currentElement = modelChildrenIterator.next();
      switch (currentElement.getConcept().getName()) {
        case "Output":
          this.mpsFileData.appendOneToOutputs(currentElement);
        case "Input":
          this.mpsFileData.appendOneToInputs(currentElement);
        case "State":
          this.mpsFileData.appendOneToStates(currentElement);
      }
      if (LOG.isInfoEnabled()) {
        LOG.info(currentElement.getName());
      }
    }
  }

  public MPS_fileData syncLocally() {
    if (fileIsPresentLocally()) {
      return this.mpsFileData;
    }
    return null;
  }

  public void start() {
    myRepositary.getModelAccess().runReadAction(() -> start(myRepositary));
  }

  protected void start(SModule module) {
    ListSequence.fromList(myModules).addElement(module);
    for (SModel model : Sequence.fromIterable(module.getModels())) {
      ListSequence.fromList(myModels).addElement(model);
    }
  }



  protected void start(SRepository repo) {
    ListSequence.fromList(myRepos).addElement(repo);
    for (SModule module : Sequence.fromIterable(myRepositary.getModules())) {
      start(module);
    }
  }


}
