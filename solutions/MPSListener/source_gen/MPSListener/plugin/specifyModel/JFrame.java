package MPSListener.plugin.specifyModel;

/*Generated by MPS */

import javax.swing.JComboBox;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import javax.swing.SwingUtilities;
import javax.swing.JPanel;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import jetbrains.mps.smodel.MPSModuleRepository;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.awt.FlowLayout;

public class JFrame {
  private MPS_LocalRepo localRepo;
  private JComboBox modelsBox;
  private JComboBox modelInstancesBox;
  private Map<SModule, Map<SModel, List<SNode>>> moduleMap;

  public JFrame() {
    this.localRepo = MPS_LocalRepo.getInstance();
    this.modelInstancesBox = new JComboBox();
    this.moduleMap = localRepo.getmoduleMap();
  }

  public void runDialogbox() {
    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        javax.swing.JFrame jframe = new javax.swing.JFrame("Main window");
        jframe.add(getPanel());
        jframe.setSize(350, 350);
        jframe.setVisible(true);

      }
    });
  }

  private JPanel getPanel() {
    JPanel jPanel = new JPanel();
    this.modelsBox = packModels();
    //  Add listener and add items to modelInstacesBox based upon the first option user selects
    ItemListener itemListener = new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent p1) {
        final String instanceName = ((String) p1.getItem());
        MPSModuleRepository.getInstance().getModelAccess().runReadAction(() -> {
          {
            Iterator<Map.Entry<SModule, Map<SModel, List<SNode>>>> pair_it = SetSequence.fromSet(moduleMap.entrySet()).iterator();
            Map.Entry<SModule, Map<SModel, List<SNode>>> pair_var;
            while (pair_it.hasNext()) {
              pair_var = pair_it.next();
              if (pair_var.getKey().getModuleName().equals("sandbox")) {
                for (Map.Entry<SModel, List<SNode>> modelEntry : SetSequence.fromSet(pair_var.getValue().entrySet())) {
                  if (modelEntry.getKey().getName().getSimpleName().equals(instanceName)) {
                    ListSequence.fromList(modelEntry.getValue()).visitAll(new IVisitor<SNode>() {
                      public void visit(SNode currentNode) {
                        modelInstancesBox.addItem(currentNode.getName());
                      }
                    });
                  }
                }
              }
            }
          }
        });
      }

    };
    this.modelsBox.addItem(itemListener);
    jPanel.add(this.modelsBox);
    jPanel.add(this.modelInstancesBox);
    jPanel.setLayout(new FlowLayout());
    return jPanel;
  }

  private JComboBox packModels() {
    final JComboBox box = new JComboBox();
    MPSModuleRepository.getInstance().getModelAccess().runReadAction(() -> {
      for (Map.Entry<SModule, Map<SModel, List<SNode>>> pair : SetSequence.fromSet(JFrame.this.moduleMap.entrySet())) {
        if (pair.getKey().getModuleName().equals("sandbox")) {
          pair.getValue().entrySet().forEach((Map.Entry<SModel, List<SNode>> currentMap) -> box.addItem(currentMap.getKey().getName().getSimpleName()));
        }
      }
    });
    return box;
  }


}
