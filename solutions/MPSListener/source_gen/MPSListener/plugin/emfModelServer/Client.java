package MPSListener.plugin.emfModelServer;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.eclipse.emfcloud.modelserver.client.ModelServerClient;
import org.jetbrains.mps.openapi.model.SNode;
import java.net.MalformedURLException;
import org.eclipse.emfcloud.modelserver.client.JsonToStringSubscriptionListener;
import org.eclipse.emfcloud.modelserver.client.ModelServerNotification;
import java.util.Optional;
import org.eclipse.emfcloud.modelserver.client.Response;
import org.springframework.http.HttpHeaders;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.apache.log4j.Level;
import org.apache.http.client.utils.URIBuilder;
import java.net.URISyntaxException;

public class Client {
  private static final Logger LOG = LogManager.getLogger(Client.class);
  private ModelServerClient modelServerClient;
  private String webSocketAddress;
  private String subscribedModel;
  private String models;
  private java.util.logging.Logger log;
  private SNode selectedInstance;
  private PatchOperations patchOpeartions;
  private static Client instance;

  private Client(SNode selectedInstance) {
    this.webSocketAddress = "http://localhost:8081/api/v2/";
    // TODO: fix subscribedmodel
    this.subscribedModel = "StateMachine.xmi";
    this.selectedInstance = selectedInstance;
    this.models = "models";
    this.patchOpeartions = PatchOperations.getInstance(this.selectedInstance, getModel(this.subscribedModel));
    this.log = java.util.logging.Logger.getLogger(Client.class.getName());
    try {
      this.modelServerClient = new ModelServerClient(this.webSocketAddress);
    } catch (MalformedURLException e) {
    }
  }

  public static Client getInstance(SNode selectedInstance) {
    if (instance == null) {
      instance = new Client(selectedInstance);
    }
    return instance;
  }

  public void start() {
    this.modelServerClient.subscribe(this.subscribedModel, new JsonToStringSubscriptionListener() {
      @Override
      public void onNotification(ModelServerNotification notification) {
        super.onNotification(notification);
      }
      @Override
      public void onSuccess(Optional<String> message) {
        log.info("Connected to the server succesfully");
      }
      @Override
      public void onError(Optional<String> message) {
        super.onError(message);
      }
      @Override
      public void onDirtyChange(boolean isDirty) {
        super.onDirtyChange(isDirty);
      }
      @Override
      public void onFullUpdate(String fullUpdate) {
        super.onFullUpdate(fullUpdate);
      }
      @Override
      public void onIncrementalUpdate(String incrementalUpdate) {
        log.info("Patch received:\n" + incrementalUpdate);
        patchOpeartions.executePatch(incrementalUpdate);
      }
      @Override
      public void onUnknown(ModelServerNotification notification) {
        super.onUnknown(notification);
      }
      @Override
      public void onOpen(Response<String> response) {
        super.onOpen(response);
      }
      @Override
      public void onClosing(int code, String reason) {
        super.onClosing(code, reason);
        log.info("Connection closed");
      }
      @Override
      public void onClosed(int code, String reason) {
        super.onClosed(code, reason);
        log.info("Connection closed");
      }
      @Override
      public void onFailure(Throwable throwable, Response<String> response) {
        super.onFailure(throwable, response);
      }
      @Override
      public void onFailure(Throwable throwable) {
        super.onFailure(throwable);
      }
    });
  }

  public void stop() {
    this.modelServerClient.unsubscribe(this.subscribedModel);
  }

  public String getAllModels() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Getting all models....");
    }
    HttpHeaders headers = new HttpHeaders();
    RestTemplate restTemplate = new RestTemplate();
    ResponseEntity responseEntity = null;
    try {
      responseEntity = restTemplate.getForEntity(this.webSocketAddress + this.models, String.class);
    } catch (HttpServerErrorException su) {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Error getting all models");
      }
    }
    return responseEntity.getBody().toString();
  }

  public String getModel(String modelUri) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Attempting to retrieve model:" + modelUri);
    }
    HttpHeaders headers = new HttpHeaders();
    RestTemplate restTemplate = new RestTemplate();
    ResponseEntity responseEntity = null;
    try {
      String queryAddress = new URIBuilder(this.webSocketAddress + this.models).addParameter("modeluri", modelUri).build().toString();
      responseEntity = restTemplate.getForEntity(queryAddress, String.class);
    } catch (URISyntaxException se) {
      if (LOG.isInfoEnabled()) {
        LOG.info(se.getMessage());
      }
    }
    return responseEntity.getBody().toString();
  }
}
