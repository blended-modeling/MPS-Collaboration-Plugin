package MPSListener.plugin.emfModelServer.parsers;

/*Generated by MPS */

import java.util.List;
import MPSListener.plugin.dataClasses.emf.patches.Patch;
import java.util.ArrayList;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import com.fasterxml.jackson.databind.JsonNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.core.JsonProcessingException;

public class PatchParser {

  public static List<Patch> getPatch(String serverPatchResponse) {
    List<Patch> patchesList = new ArrayList<>();
    ObjectMapper objectMapper = new ObjectMapper();
    HashMap<String, String> patchMap = null;

    try {
      JsonNode nodes = objectMapper.readTree(serverPatchResponse);
      for (JsonNode node : Sequence.fromIterable(nodes)) {
        patchesList.add(parseToPatch(objectMapper.readValue(node.toPrettyString(), new TypeReference<HashMap<String, String>>() {})));
      }

    } catch (JsonMappingException e) {
      System.out.println(e.getMessage());
    } catch (JsonProcessingException e) {
      System.out.println(e.getMessage());
    }
    return patchesList;
  }

  private static Patch parseToPatch(HashMap<String, String> readValue) {
    return new Patch(readValue.get("op"), readValue.get("path"), readValue.get("from"), readValue.get("value"));
  }

}
