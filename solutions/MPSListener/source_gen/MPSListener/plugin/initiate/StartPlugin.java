package MPSListener.plugin.initiate;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import MPSListener.plugin.emfModelServer.Client;
import MPSListener.plugin.listener.GlobalSModelListener;
import java.util.logging.Logger;
import jetbrains.mps.project.Project;
import MPSListener.plugin.synchronise.MPS_LocalRepo;

public class StartPlugin {

  private SNode startingNode;
  private static StartPlugin instance;
  private Client emfClient;
  private GlobalSModelListener mylistener;
  private static boolean isRunning = false;
  private Logger logger;
  private Project currentProject;
  private MPS_LocalRepo mpsLocalRepo;

  private StartPlugin(SNode startingNode, Project project) {
    this.startingNode = startingNode;
    this.emfClient = Client.getInstance();
    this.mylistener = GlobalSModelListener.getInstance();
    this.logger = Logger.getLogger(StartPlugin.class.getSimpleName());
    this.currentProject = project;
    this.mpsLocalRepo = MPS_LocalRepo.getInstance();
  }
  public static StartPlugin getInstance() {
    return instance;
  }


  public static StartPlugin getInstance(SNode node, Project project) {
    if (instance == null) {
      instance = new StartPlugin(node, project);
    }
    return instance;
  }

  public void changeTargetNode(SNode target) {
    this.startingNode = target;

  }
  public static boolean isRunning() {
    return isRunning;
  }

  public void start() {
    if (!(isRunning)) {
      // Ordering of the classes starting up *matter*
      this.mpsLocalRepo.start(this.startingNode);
      this.emfClient.start(this.startingNode, this.currentProject);
      this.mylistener.start(this.startingNode, this.currentProject);
      isRunning = true;
    }
  }

  public void stop() {
    this.emfClient.stop();
    this.mylistener.stop();
    this.mpsLocalRepo.stop();
    this.isRunning = false;
  }
}
