package MPSListener.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.event.SPropertyChangeEvent;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.module.SRepository;

public class MyListener extends GlobalSModelListener {
  private static final Logger LOG = LogManager.getLogger(MyListener.class);
  private EmfClient emfClient;
  private static MyListener myListener;
  private MyListener() {
    super(MPSModuleRepository.getInstance());
    this.emfClient = EmfClient.getInstance();
  }

  public static MyListener getInstance() {
    if (myListener == null) {
      System.out.println("Creating instance at MyListener.");
      myListener = new MyListener();
    }
    return myListener;
  }

  @Override
  public void propertyChanged(@NotNull SPropertyChangeEvent event) {
    PropertyChanged propertyChanged = new PropertyChanged(event);

    if (LOG.isInfoEnabled()) {
      LOG.info(propertyChanged.toString());
    }

    SModel sModel = event.getModel();
    SNode sNode = event.getNode();
    SModule sModule = event.getModel().getModule();
    ListSequence.fromList(myRepos).visitAll(new IVisitor<SRepository>() {
      public void visit(SRepository it) {
      }
    });
  }



}
