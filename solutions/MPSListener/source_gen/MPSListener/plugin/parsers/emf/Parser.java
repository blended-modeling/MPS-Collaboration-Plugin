package MPSListener.plugin.parsers.emf;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import com.fasterxml.jackson.databind.ObjectMapper;
import MPSListener.plugin.dataClasses.emf.fileData;
import java.util.HashMap;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.apache.log4j.Level;
import java.util.List;
import MPSListener.plugin.dataClasses.emf.input;
import java.util.ArrayList;
import java.util.Collections;
import MPSListener.plugin.dataClasses.emf.output;
import MPSListener.plugin.dataClasses.emf.states;
import java.util.Iterator;
import org.jetbrains.mps.openapi.model.SNode;

public class Parser {
  private static final Logger LOG = LogManager.getLogger(Parser.class);

  private ObjectMapper objectMapper;
  private fileData fileData;
  public Parser() {
    this.objectMapper = new ObjectMapper();
    this.fileData = null;
  }

  private HashMap<String, Object> getFileMapping(String serverResponseModel) {
    TypeReference<HashMap<String, Object>> modelDataReference = new TypeReference<HashMap<String, Object>>() {};
    HashMap<String, Object> baseMap = null;
    HashMap<String, Object> dataMap = null;
    try {
      baseMap = objectMapper.readValue(serverResponseModel, modelDataReference);
      dataMap = as_jpiiov_a0a1a3a6((baseMap.get("data")), HashMap.class);
    } catch (JsonProcessingException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error(e.getMessage());
      }
    }
    return dataMap;
  }

  public fileData parseFileData(String serverResponseModel) {
    HashMap<String, Object> fileMap = getFileMapping(serverResponseModel);
    fileData fileData = new fileData(as_jpiiov_a0a0a1a8(fileMap.get("$type"), String.class), as_jpiiov_a1a0a1a8(fileMap.get("$id"), String.class), as_jpiiov_a2a0a1a8(fileMap.get("name"), String.class), getInputs(as_jpiiov_a0d0a0b0i(fileMap.get("input"), List.class)), getOutputs(as_jpiiov_a0e0a0b0i(fileMap.get("output"), List.class)), getStates(as_jpiiov_a0f0a0b0i(fileMap.get("states"), List.class)));
    return fileData;
  }

  private List<input> getInputs(List<Object> inputs) {
    List<input> extractedInputs = new ArrayList<input>();
    for (Object object : inputs) {
      extractedInputs.add(new input(as_jpiiov_a0a0a0a0b0k(object, HashMap.class)));
    }
    return Collections.unmodifiableList(extractedInputs);
  }

  private List<output> getOutputs(List<Object> inputs) {
    List<output> extractedOutputs = new ArrayList<output>();
    for (Object object : inputs) {
      extractedOutputs.add(new output(as_jpiiov_a0a0a0a0b0m(object, HashMap.class)));
    }
    return Collections.unmodifiableList(extractedOutputs);
  }

  private List<states> getStates(List<Object> inputs) {
    List<states> extractedStates = new ArrayList<states>();
    for (Object object : inputs) {
      extractedStates.add(new states(as_jpiiov_a0a0a0a0b0o(object, HashMap.class)));
    }
    return Collections.unmodifiableList(extractedStates);
  }


  public boolean nameIsMatch(String fileName, Iterator<? extends SNode> childrenIterator) {
    while (childrenIterator.hasNext()) {
      SNode currentNode = childrenIterator.next();
      if (currentNode.getName().equals(fileName)) {
        return true;
      }
    }
    return false;
  }
  private static <T> T as_jpiiov_a0a1a3a6(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a0a0a1a8(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a1a0a1a8(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a2a0a1a8(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a0d0a0b0i(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a0e0a0b0i(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a0f0a0b0i(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a0a0a0a0b0k(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a0a0a0a0b0m(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_jpiiov_a0a0a0a0b0o(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
