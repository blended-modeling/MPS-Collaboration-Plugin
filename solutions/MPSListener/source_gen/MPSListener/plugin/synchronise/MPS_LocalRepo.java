package MPSListener.plugin.synchronise;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.Objects;

public class MPS_LocalRepo {
  private static final Logger LOG = LogManager.getLogger(MPS_LocalRepo.class);
  protected SRepository myRepository;
  protected SModule modelInstanceModule;
  protected List<SModel> mymodels;
  protected List<SModule> myModules;
  private static MPS_LocalRepo instance;
  private Map<SModule, Map<SModel, List<SNode>>> moduleMap;
  private java.util.logging.Logger logger;

  private MPS_LocalRepo() {
    this.mymodels = ListSequence.fromList(new ArrayList<SModel>());
    this.myModules = ListSequence.fromList(new ArrayList<SModule>());
    this.moduleMap = new HashMap<>();
    this.logger = java.util.logging.Logger.getLogger(MPS_LocalRepo.class.getSimpleName());
  }

  public static MPS_LocalRepo getInstance() {
    if (instance == null) {
      instance = new MPS_LocalRepo();
    }
    return instance;
  }

  public void start(SNode modelInstance) {
    this.modelInstanceModule = modelInstance.getModel().getModule();
    this.myRepository = modelInstance.getModel().getRepository();
    myRepository.getModelAccess().runReadAction(() -> {
      for (SModule module : Sequence.fromIterable(myRepository.getModules())) {
        for (SModel model : Sequence.fromIterable(module.getModels())) {
          ListSequence.fromList(mymodels).addElement(model);
        }
        ListSequence.fromList(myModules).addElement(module);
      }
    });
    mapModules();
    LoggingRuntime.logMsgView(Level.INFO, "MPS_Local repo initialised successfully.", MPS_LocalRepo.class, null, null);
  }

  private void mapModules() {
    Map<SModel, List<SNode>> singleModelMap;
    for (SModule currentModule : this.myModules) {
      singleModelMap = new HashMap<>();
      for (SModel currentModel : currentModule.getModels()) {
        singleModelMap.put(currentModel, findAllInstances(currentModel));
      }
      this.moduleMap.put(currentModule, singleModelMap);
    }
  }


  public SModule findModule(final String moduleName) {
    final Wrappers._T<SModule> module = new Wrappers._T<SModule>(null);
    this.myRepository.getModelAccess().runReadAction(() -> {
      for (SModule currentModule : MPS_LocalRepo.this.myModules) {
        if (String.valueOf(currentModule.getModuleName()).equals(moduleName)) {
          module.value = currentModule;
        }
      }
    });
    return module.value;
  }

  public SModel findModel(String moduleToFind, final String modelToFind) {
    final Wrappers._T<SModel> model = new Wrappers._T<SModel>(null);
    try {
      final SModule module = Objects.requireNonNull(findModule(moduleToFind));
      this.myRepository.getModelAccess().runReadAction(() -> {
        for (SModel currentModel : Sequence.fromIterable(module.getModels())) {
          if (currentModel.getName().getSimpleName().equals(modelToFind)) {
            model.value = currentModel;
          }
        }
      });
    } catch (NullPointerException e) {
      logger.info(e.getMessage());
      return null;
    }
    return model.value;
  }

  public List<SModel> findAllModels(SModule module) {
    List<SModel> allModels = ListSequence.fromList(new ArrayList<SModel>());
    for (SModel model : Sequence.fromIterable(module.getModels())) {
      ListSequence.fromList(allModels).addElement(model);
    }
    return allModels;
  }

  public List<SNode> findAllInstances(SModel model) {
    List<SNode> allInstances = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode node : Sequence.fromIterable(model.getRootNodes())) {
      ListSequence.fromList(allInstances).addElement(node);
    }
    return allInstances;
  }

  public List<String> findAllInstances(String modelNameSimple) {
    List<String> modelNames = ListSequence.fromList(new ArrayList<String>());
    for (SModel currentModel : this.mymodels) {
      if (currentModel.getName().getSimpleName().equals(modelNameSimple)) {
        for (SNode instance : Sequence.fromIterable(currentModel.getRootNodes())) {
          ListSequence.fromList(modelNames).addElement(instance.getName());
        }
      }
    }
    return modelNames;
  }

  public void stop() {
    this.myModules = ListSequence.fromList(new ArrayList<SModule>());
    this.mymodels = ListSequence.fromList(new ArrayList<SModel>());
    this.moduleMap = new HashMap<>();
  }
}
