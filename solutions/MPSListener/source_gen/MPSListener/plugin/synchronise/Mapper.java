package MPSListener.plugin.synchronise;

/*Generated by MPS */

import java.util.HashMap;
import MPSListener.plugin.dataClasses.emf.getModel.nodeEMF;
import org.jetbrains.mps.openapi.model.SNode;
import MPSListener.plugin.dataClasses.emf.getModel.fileData;
import java.util.List;
import java.util.logging.Logger;
import MPSListener.plugin.emfModelServer.parsers.Parser;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class Mapper {
  private HashMap<nodeEMF, SNode> map;
  private HashMap<String, String> idMap;
  private fileData emfFileData;
  private SNode modelInstance;
  private List<SNode> childrenList;
  private Logger log;
  private Parser parser;
  private static Mapper instance;
  private String serverResponseModel;

  private Mapper(SNode node, String serverResponseModel) {
    this.parser = new Parser();
    this.emfFileData = null;
    this.modelInstance = node;
    this.log = Logger.getLogger(Mapper.class.getSimpleName());
    this.serverResponseModel = serverResponseModel;
    this.childrenList = new ArrayList<>();
    this.map = new HashMap<>();
    start();
  }

  public static Mapper getInstance(SNode node, String serverResponseModel) {
    if (instance == null) {
      instance = new Mapper(node, serverResponseModel);
    }
    return instance;
  }

  private void start() {
    this.emfFileData = Parser.parseFileData(this.serverResponseModel);
    populateChildren();
    mapElements();
  }

  private void populateChildren() {
    for (SNode child : Sequence.fromIterable(modelInstance.getChildren())) {
      childrenList.add(child);
    }
  }


  private void mapElements() {
    for (int i = 0; i < emfFileData.getNodeEmfList().size(); i++) {
      map.put(emfFileData.getNodeEmfList().get(i), childrenList.get(i));
    }
  }


  public HashMap<nodeEMF, SNode> getHashMap() {
    return this.map;
  }

  public SNode getNode(String emfNodePath) {
    String givenId = parsePathToId(emfNodePath);
    for (Map.Entry<nodeEMF, SNode> entry : SetSequence.fromSet(this.map.entrySet())) {
      if (entry.getKey().getId().equals(givenId)) {
        log.info("Node found!");
        return entry.getValue();
      }
    }
    this.log.warning("Node not found");
    return null;
  }

  private String parsePathToId(String emfNodePath) {
    String[] args = emfNodePath.split("/");
    return "//@" + args[1] + "." + args[2];
  }
}
