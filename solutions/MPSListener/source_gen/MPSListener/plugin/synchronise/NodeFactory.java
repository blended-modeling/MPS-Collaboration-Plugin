package MPSListener.plugin.synchronise;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import java.util.UUID;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class NodeFactory {
  private static final Logger LOG = LogManager.getLogger(NodeFactory.class);
  private NodeFactory instance;

  private NodeFactory() {
  }
  public NodeFactory getNodeFactory() {
    if (instance == null) {
      instance = new NodeFactory();
    }
    return instance;
  }

  public static SConcept getConcept(String moduleUUID, String conceptID, String conceptName) {
    return MetaAdapterFactory.getConcept(new SConceptId(new SLanguageId(UUID.fromString(moduleUUID)), Long.parseLong(conceptID)), conceptName);
  }

  public static SContainmentLink getSContainmentLink(SNode node, String containmentlinkName) {
    LoggingRuntime.logMsgView(Level.INFO, "Looking containment with name: " + containmentlinkName, NodeFactory.class, null, null);
    for (SContainmentLink containmentLink : CollectionSequence.fromCollection(node.getConcept().getContainmentLinks())) {
      LoggingRuntime.logMsgView(Level.INFO, "Current containment: " + containmentLink.getName(), NodeFactory.class, null, null);
      if (containmentLink.getName().equals(containmentlinkName)) {
        LoggingRuntime.logMsgView(Level.INFO, "Found SContainment link: " + containmentLink.getName(), NodeFactory.class, null, null);
        return containmentLink;
      }
    }
    return null;
  }
  public static SNode getConceptNodeByName(String name, Iterable<SNode> rootNodes) {
    for (SNode rootNode : Sequence.fromIterable(rootNodes)) {
      if (rootNode.getName().equals(name)) {
        return (SNode) rootNode;
      }
    }
    return null;
  }

}
