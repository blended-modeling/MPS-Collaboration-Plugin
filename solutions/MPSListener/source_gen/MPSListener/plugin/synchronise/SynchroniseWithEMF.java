package MPSListener.plugin.synchronise;

/*Generated by MPS */

import MPSListener.plugin.dataClasses.emf.fileData;
import org.jetbrains.mps.openapi.module.SRepository;
import MPSListener.plugin.listener.MyListener;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.logging.Logger;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class SynchroniseWithEMF {
  private fileData emfFileData;
  private SRepository myRepositary;
  private MPSListener.plugin.dataClasses.mps.fileData mpsFileData;
  private MyListener myListener;
  private SNode modelInstance;
  private Logger log;

  protected List<SRepository> myRepos;
  protected List<SModule> myModules;
  protected List<SModel> myModels;



  public SynchroniseWithEMF(fileData emfFileData, SNode modelInstance) {
    this.emfFileData = emfFileData;
    this.myModules = ListSequence.fromList(new ArrayList<SModule>());
    this.myRepos = ListSequence.fromList(new ArrayList<SRepository>());
    this.myModels = ListSequence.fromList(new ArrayList<SModel>());
    this.modelInstance = modelInstance;
    this.myRepositary = this.modelInstance.getModel().getModule().getRepository();
    this.mpsFileData = new MPSListener.plugin.dataClasses.mps.fileData(this.emfFileData.getName());
    this.log = Logger.getLogger(SynchroniseWithEMF.class.getCanonicalName());
    start();
  }


  public void start() {
    myRepositary.getModelAccess().runReadAction(() -> {

      ListSequence.fromList(myRepos).addElement(myRepositary);
      for (SModule module : Sequence.fromIterable(myRepositary.getModules())) {
        for (SModel model : Sequence.fromIterable(module.getModels())) {
          ListSequence.fromList(myModels).addElement(model);
        }
        ListSequence.fromList(myModules).addElement(module);
      }
    });
    parseModeldata();
  }

  private void parseModeldata() {
    for (SNode element : Sequence.fromIterable(this.modelInstance.getChildren())) {
      log.info(element.getName());
      switch (element.getConcept().getName()) {
        case "Output":
          this.mpsFileData.appendOneToOutputs(element);
          System.out.println(element.getPresentation() + ":" + element.getContainmentLink().getTargetConcept());

        case "Input":
          this.mpsFileData.appendOneToInputs(element);
        case "State":
          this.mpsFileData.appendOneToStates(element);
      }
    }

  }

  public MPSListener.plugin.dataClasses.mps.fileData getMPSFileData() {
    return this.mpsFileData;
  }
}
