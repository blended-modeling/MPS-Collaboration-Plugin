package MPSListener.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import MPSListener.plugin.specifyModel.StartPlugin;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;

public class Enable_Collaboration_Action extends BaseAction {
  private static final Icon ICON = null;

  public Enable_Collaboration_Action() {
    super("Enable Collaboration", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setActionAccess(ActionAccess.UNDO_PROJECT);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    event.getPresentation().setEnabledAndVisible(StartPlugin.getInstance(event.getData(MPSCommonDataKeys.NODE)).isRunning() == false);
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    Enable_Collaboration_Action.this.startCollaboration(event);
  }
  private void startCollaboration(final AnActionEvent event) {
    StartPlugin pluginLauncher = StartPlugin.getInstance();
    if (pluginLauncher != null) {
      pluginLauncher.setTarget(event.getData(MPSCommonDataKeys.NODE));
    }
    if (pluginLauncher == null) {
      pluginLauncher = StartPlugin.getInstance(event.getData(MPSCommonDataKeys.NODE));
    }
    pluginLauncher.start();

  }
}
