package MPSListener.EMF;

/*Generated by MPS */

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.log4j.Logger;
import org.apache.log4j.BasicConfigurator;
import org.springframework.http.HttpHeaders;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.apache.http.client.utils.URIBuilder;
import java.net.URISyntaxException;
import MPSListener.plugin.PropertyChanged;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.core.JsonProcessingException;

public class EmfClient {
  private final String serverSocketAddress;
  private final String models;
  private final String currentModel;
  private final ObjectMapper om;
  private static EmfClient emfClient;
  private Logger log;
  private EmfClient() {
    this.serverSocketAddress = "http://localhost:8081/api/v2/";
    this.models = "models";
    this.currentModel = "SuperBrewer3000.json";
    this.om = new ObjectMapper();
    this.log = Logger.getLogger(EmfClient.class);
    BasicConfigurator.configure();
  }

  public static EmfClient getInstance() {
    if (emfClient == null) {
      emfClient = new EmfClient();
    }
    return emfClient;
  }

  public String getAllModels() {
    log.info("Getting all models....");
    HttpHeaders headers = new HttpHeaders();
    RestTemplate restTemplate = new RestTemplate();
    ResponseEntity responseEntity = null;
    try {
      responseEntity = restTemplate.getForEntity(this.serverSocketAddress + this.models, String.class);
    } catch (HttpServerErrorException su) {
      log.warn("Error getting all models\n" + su.getMessage());
    }
    return responseEntity.getBody().toString();
  }

  public String getModel(String modelUri) {
    log.info("Attempting to retrieve model:" + modelUri);
    HttpHeaders headers = new HttpHeaders();
    RestTemplate restTemplate = new RestTemplate();
    ResponseEntity responseEntity = null;
    try {
      String queryAddress = new URIBuilder(this.serverSocketAddress + this.models).addParameter("modeluri", modelUri).build().toString();
      responseEntity = restTemplate.getForEntity(queryAddress, String.class);
    } catch (URISyntaxException se) {
      log.info(se.getMessage());
    }
    return responseEntity.getBody().toString();
  }

  public String getNodeFromModel(PropertyChanged propertyChanged) {
    String modelDetails = getModel(this.currentModel);
    String nodeDetails = "";
    try {
      JsonNode jsonNode = om.readTree(modelDetails);
      log.info(jsonNode.toPrettyString());
      nodeDetails = jsonNode.get(0).toPrettyString();
    } catch (JsonProcessingException pe) {
      log.error(pe.getMessage());
    }
    return nodeDetails;
  }

  public static void main(String[] args) {
    EmfClient emfServer = new EmfClient();
    EMF_parser emf_synchroniseModel = new EMF_parser();
  }
}
